package handlers

import (
	"context"
	"encoding/json"
	"fmt"
	"net/http"
	"reflect"
	"slices"
	"strings"

	api "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"github.com/pkg/errors"
	"github.com/sashabaranov/go-openai"
	log "github.com/sirupsen/logrus"

	"github.com/iamwavecut/ngbot/internal/bot"
	"github.com/iamwavecut/ngbot/internal/config"
	"github.com/iamwavecut/ngbot/internal/db"
	"github.com/iamwavecut/ngbot/internal/i18n"
	"github.com/iamwavecut/tool"
)

var flaggedEmojis = []string{"üí©", "üëé", "üñï", "ü§Æ", "ü§¨", "üò°", "üíÄ", "‚ò†Ô∏è", "ü§¢", "üëø"}

type banInfo struct {
	OK         bool    `json:"ok"`
	UserID     int64   `json:"user_id"`
	Banned     bool    `json:"banned"`
	When       string  `json:"when"`
	Offenses   int     `json:"offenses"`
	SpamFactor float64 `json:"spam_factor"`
}

type Reactor struct {
	s      bot.Service
	llmAPI *openai.Client
	model  string
}

func NewReactor(s bot.Service, llmAPI *openai.Client, model string) *Reactor {
	log.WithFields(log.Fields{
		"scope":  "Reactor",
		"method": "NewReactor",
	}).Debug("creating new Reactor")
	r := &Reactor{
		s:      s,
		llmAPI: llmAPI,
		model:  model,
	}
	return r
}

func (r *Reactor) Handle(ctx context.Context, u *api.Update, chat *api.Chat, user *api.User) (bool, error) {
	entry := r.getLogEntry().
		WithFields(log.Fields{
			"method":     "Handle",
			"chat_id":    chat.ID,
			"chat_title": chat.Title,
		})
	entry.Debug("handling update")

	if u == nil {
		entry.Error("Update is nil")
		return false, errors.New("nil update")
	}

	nonNilFields := []string{}
	isNonNilPtr := func(v reflect.Value) bool {
		return v.Kind() == reflect.Ptr && !v.IsNil()
	}
	val := reflect.ValueOf(u).Elem()
	typ := val.Type()
	for i := 0; i < val.NumField(); i++ {
		field := val.Field(i)
		fieldName := typ.Field(i).Name

		if isNonNilPtr(field) {
			nonNilFields = append(nonNilFields, fieldName)
		}
	}
	entry.Debug("Checking update type")
	if u.Message == nil && u.MessageReaction == nil {
		entry.Debug("Update is not about message or reaction, not proceeding")
		return false, nil
	}
	entry.Debug("Update is about message or reaction, proceeding")

	if chat == nil {
		entry.Warn("No chat")
		entry.WithField("non_nil_fields", strings.Join(nonNilFields, ", ")).Warn("Non-nil fields")
		return true, nil
	}
	if user == nil {
		entry.Warn("No user")
		entry.WithField("non_nil_fields", strings.Join(nonNilFields, ", ")).Warn("Non-nil fields")
		return true, nil
	}

	entry.Debug("Fetching chat settings")
	settings, err := r.s.GetSettings(chat.ID)
	if err != nil {
		entry.WithError(err).Error("Failed to get chat settings")
	}
	if settings == nil {
		entry.Debug("Settings are nil, using default settings")
		settings = &db.Settings{
			Enabled:          true,
			ChallengeTimeout: defaultChallengeTimeout,
			RejectTimeout:    defaultRejectTimeout,
			Language:         "en",
			ID:               chat.ID,
		}

		err = r.s.SetSettings(settings)
		if err != nil {
			entry.WithError(err).Error("Failed to set default chat settings")
		}
	}

	if !settings.Enabled {
		entry.Warn("reactor is disabled for this chat")
		return true, nil
	}

	b := r.s.GetBot()
	if b == nil {
		entry.Warn("Bot is nil")
		return false, errors.New("nil bot")
	}

	if u.MessageReaction != nil {
		entry.Debug("Processing message reaction")
		for _, react := range u.MessageReaction.NewReaction {
			flags := map[string]int{}
			emoji := react.Emoji
			if react.Type == api.StickerTypeCustomEmoji {
				entry.Debug("processing custom emoji")
				emojiStickers, err := b.GetCustomEmojiStickers(api.GetCustomEmojiStickersConfig{
					CustomEmojiIDs: []string{react.CustomEmoji},
				})
				if err != nil {
					entry.WithError(err).Warn("custom emoji get error")
					continue
				}
				if len(emojiStickers) > 0 {
					emoji = emojiStickers[0].Emoji
				}
			}
			if slices.Contains(flaggedEmojis, emoji) {
				entry.WithField("emoji", emoji).Debug("flagged emoji detected")
				flags[emoji]++
			}

			for _, flagged := range flags {
				if flagged >= 5 {
					entry.Warn("user reached flag threshold, attempting to ban")
					if err := bot.BanUserFromChat(b, user.ID, chat.ID); err != nil {
						entry.WithFields(log.Fields{
							"user": bot.GetFullName(user),
							"chat": chat.Title,
						}).Error("cant ban user in chat")
					}
					return true, nil
				}
			}
		}
	}

	if u.Message != nil {
		entry.Debug("handling new message")
		if err := r.handleFirstMessage(ctx, u, chat, user); err != nil {
			entry.WithError(err).Error("error handling new message")
		}
	}

	return true, nil
}

func (r *Reactor) handleFirstMessage(ctx context.Context, u *api.Update, chat *api.Chat, user *api.User) error {
	entry := r.getLogEntry().WithField("method", "handleFirstMessage")
	entry.Debug("handling first message")
	m := u.Message

	entry.Debug("checking if user is a member")
	isMember, err := r.s.IsMember(ctx, chat.ID, user.ID)
	if err != nil {
		return errors.WithMessage(err, "cant check if member")
	}
	if isMember {
		entry.Debug("user is already a member")
		return nil
	}

	entry.Debug("checking first message content")
	if err := r.checkFirstMessage(ctx, chat, user, m); err != nil {
		return errors.WithMessage(err, "cant check first message")
	}

	return nil
}

func (r *Reactor) checkFirstMessage(ctx context.Context, chat *api.Chat, user *api.User, m *api.Message) error {
	entry := r.getLogEntry().
		WithFields(log.Fields{
			"method":    "checkFirstMessage",
			"user_name": bot.GetUN(user),
			"user_id":   user.ID,
		})

	entry.Debug("checking first message")
	b := r.s.GetBot()

	messageContent := m.Text
	if messageContent == "" && m.Caption != "" {
		messageContent = m.Caption
	}

	if messageContent == "" {
		entry.Warn("empty message content, skipping spam check")
		return nil
	}

	banSpammer := func(chatID, userID int64, messageID int) (bool, error) {
		entry.Info("spam detected, banning user")
		var errs []error
		if err := bot.DeleteChatMessage(b, chatID, messageID); err != nil {
			errs = append(errs, errors.Wrap(err, "failed to delete message"))
		}
		if err := bot.BanUserFromChat(b, userID, chatID); err != nil {
			errs = append(errs, errors.Wrap(err, "failed to ban user"))
		}
		if len(errs) > 0 {
			lang := r.getLanguage(chat, user)

			entry.WithField("errors", errs).Error("failed to handle spam")
			var msgContent string
			if len(errs) == 2 {
				entry.Warn("failed to ban and delete message")
				msgContent = fmt.Sprintf(i18n.Get("I can't delete messages or ban spammer \"%s\".", lang), bot.GetUN(user))
			} else if errors.Is(errs[0], errors.New("failed to delete message")) {
				entry.Warn("failed to delete message")
				msgContent = fmt.Sprintf(i18n.Get("I can't delete messages from spammer \"%s\".", lang), bot.GetUN(user))
			} else {
				entry.Warn("failed to ban spammer")
				msgContent = fmt.Sprintf(i18n.Get("I can't ban spammer \"%s\".", lang), bot.GetUN(user))
			}
			msgContent += " " + i18n.Get("I should have the permissions to ban and delete messages here.", lang)
			msg := api.NewMessage(chat.ID, msgContent)
			msg.ParseMode = api.ModeHTML
			if _, err := b.Send(msg); err != nil {
				entry.WithError(err).Error("failed to send message about lack of permissions")
			}
			return false, errors.New("failed to handle spam")
		}
		return true, nil
	}

	entry.Debug("checking if user is banned")
	url := fmt.Sprintf("https://api.lols.bot/account?id=%d", user.ID)
	req, err := http.NewRequestWithContext(ctx, "GET", url, nil)
	if err != nil {
		entry.WithError(err).Error("failed to create request")
		return errors.WithMessage(err, "failed to create request")
	}
	req.Header.Set("accept", "application/json")

	client := &http.Client{}
	resp, err := client.Do(req)
	if err != nil {
		entry.WithError(err).Error("failed to send request")
		return errors.WithMessage(err, "failed to send request")
	}
	defer resp.Body.Close()

	banCheck := banInfo{}
	if err := json.NewDecoder(resp.Body).Decode(&banCheck); err != nil {
		entry.WithError(err).Error("failed to decode response")
		return errors.WithMessage(err, "failed to decode response")
	}

	if banCheck.Banned {
		entry = entry.WithFields(log.Fields{
			"chat_id":    chat.ID,
			"user_id":    user.ID,
			"message_id": m.MessageID,
		})
		success, err := banSpammer(chat.ID, user.ID, m.MessageID)
		if err != nil {
			entry.WithError(err).Error("Failed to execute ban action on spammer")
			return errors.Wrap(err, "failed to ban spammer")
		}
		if !success {
			entry.Error("Ban action on spammer was unsuccessful")
			return errors.New("failed to ban spammer")
		}
		entry.Info("Spammer successfully banned and removed from chat")
		return nil
	}

	entry.Info("sending first message to OpenAI for spam check")
	llmResp, err := r.llmAPI.CreateChatCompletion(
		ctx,
		openai.ChatCompletionRequest{
			Model: r.model,
			Messages: []openai.ChatCompletionMessage{
				{
					Role: openai.ChatMessageRoleSystem,
					Content: `You are an advanced spam detection system designed to analyze messages in various languages. Your task is to carefully evaluate the given input and determine whether it's spam or not.

Spam characteristics often include:
1. Unsolicited offers for remote work or easy money
2. Promises of unrealistic earnings
3. Requests to contact in private messages for suspicious opportunities
4. Promotional content for gambling or questionable financial schemes
5. Use of excessive emojis or unusual formatting to grab attention
6. Links to external platforms or bots, especially with referral codes

However, normal conversation, even if it includes potentially sensitive words, should not be flagged as spam if the context is appropriate.

After your analysis, respond with ONLY ONE of these two options:
1. 'SPAM' if you determine the message is spam
2. 'NOT_SPAM' if you determine the message is not spam

Do not provide any explanation or additional output beyond these two responses.

<example>
Input: Hello, how are you?
Response: NOT_SPAM

Input: –•–æ—á–µ—à—å –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ —É–¥–∞–ª—ë–Ω–∫–µ –Ω–æ –Ω–µ –∑–Ω–∞–µ—à—å –∫–∞–∫? –ù–∞–ø–∏—à–∏ –º–Ω–µ –∏ —è —Ç–µ–±–µ –≤—Å—ë —Ä–∞—Å—Å–∫–∞–∂—É, –æ—Ç 18 –ª–µ—Ç. –∂–¥—É –≤—Å–µ—Ö –∂–µ–ª–∞—é—â–∏—Ö –≤ –ª—Å.
Response: SPAM

Input: –ù—É–∂–Ω—ã –ª—é–¥–∏! –°—Ç–∞–±–∏–ª—å–Ω–Ω—ã–π –¥–æ—Ö–æ–¥, –∫–∞–∂–¥—É—é –Ω–µ–¥–µ–ª—é, –Ω–∞ —É–¥–∞–ª—ë–Ω–∫–µ, –æ—Ç 18 –ª–µ—Ç, –ø–∏—à–∏—Ç–µ –≤ –ª—Å.
Response: SPAM

Input: –ò—â—É –ª—é–¥e–π, –∑–∞–∏–Ω—Çe—Äe—Å–æ–≤–∞–Ω–Ω—ã—Ö –≤ —Öo—Äo—à–µ–º –¥–æ–ø.–¥–æ—Ö–æ–¥–µ –Ω–∞ —É–¥–∞–ª–µ–Ω–∫–µ. –ù–µ –ø–æ–ª–Ω–∞—è –∑–∞–Ω—è—Ç–æ—Å—Ç—å, –æ—Ç 21. –ü–æ –≤–æ–ø—Ä–æ—Å–∞–º –ø–∏—à–∏—Ç–µ –≤ –õ–°
Response: SPAM

Input: 10000—Ö –û—Ä—É—É—É –≤ –¥—Ä—É–≥–∏—Ö –∏–≥—Ä–∞–ª –∏ —Ç–∞–∫–æ–≥–æ –Ω–µ —Ä–∞–∑—É –Ω–µ –±—ã–ª–æ, –ø—Ä–æ—Å—Ç–æ –∫–∞–ø–µ—Ü  –∞ —Ç–∞–∫–æ–µ –≤–æ–∑–º–æ–∂–Ω–æ???? 

ü•á–ü–µ—Ä–≤–∞—è –∏–≥—Ä–æ–≤–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –≤ Telegram

https://t.me/jetton?start=cdyrsJsbvYy
Response: SPAM

Input: –ù–∞–±–∏—Ä–∞—é –∫–æ–º–∞–Ω–¥—É –Ω—É–∂–Ω–æ 2-3 —á–µ–ª–æ–≤–µ–∫–∞ –Ω–∞ —É–¥–∞–ª—ë–Ω–Ω—É—é —Ä–∞–±–æ—Ç—É –∑ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø–∫ –æ—Ç  –¥–µ—Å—è—Ç —Ç—ã—Å—è—á –≤ –¥–µ–Ω—å  –ø–∏—à–∏—Ç–µ + –≤ –ª—Å
Response: SPAM

Input: üíé –ü·¥©·¥è·¥á·¥ã·¥õ TONCOIN,  ô—ã·¥®—É·¥Ñ·¥õ–∏·¥ß ·¥Ñ ô·¥è·¥á·¥¶·¥è ·¥ã·¥Ä…ú–∏–Ω·¥è –±·¥è·¥õ·¥Ä  ô ·¥õ·¥á·¥ß·¥á·¥¶·¥©·¥Ä ç ç·¥á

üëë –°·¥Ä ç—ã·¥á  ô—ã·¥Ñ·¥è·¥ã–∏·¥á …Ø·¥Ä–Ω·¥Ñ—ã  ô—ã–∏·¥¶·¥©—ã…Ø·¥Ä 
‚è≥ –ú·¥è ç·¥á–Ω·¥õ·¥Ä·¥ß—å–Ω—ã–π  ô ô·¥è–¥ –∏  ô—ã ô·¥è–¥
üé≤ –ù·¥á ·¥õ·¥©·¥á–±—É·¥á·¥õ ·¥©·¥á·¥¶–∏·¥Ñ·¥õ·¥©·¥Ä—Ü–∏–∏
üèÜ –í·¥Ñ·¥á ·¥ß—É—á…Ø–∏·¥á ·¥®·¥©·¥è ô·¥Ä–π–¥·¥á·¥©—ã –∏ –∏·¥¶·¥©—ã 

üçã –ó·¥Ä–±·¥©·¥Ä·¥õ—å 1000 USDT üëá

t.me/slotsTON_BOT?start=cdyoNKvXn75
Response: SPAM

Input: –≠—Ä–æ—Ç–∏–∫–∞
Response: NOT_SPAM

Input: –û–ª–µ–≥–∏–∫)))
Response: NOT_SPAM

Input: –ê–≤–∞–Ω—Ç—é—Ä–∞!
Response: NOT_SPAM

Input: –Ø –≤—Å—ë –ø–æ–Ω—è–ª, —Å–ø–∞—Å–∏–±–æ!
Response: NOT_SPAM

Input: –≠—Ç–æ –Ω–µ —Ç–∞–∫
Response: NOT_SPAM

Input: –ù–µ —Å–æ—á—Ç–∏—Ç–µ –∑–∞ —Å–ø–∞–º, —Ö–æ—á—É –ø–æ—Ä–µ–∫–ª–∞–º–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ–π –∫–∞–Ω–∞–ª
Response: NOT_SPAM

Input: –ù–µ—Ç
Response: NOT_SPAM

Input: –Ø –≤—Å—ë –ø–æ–Ω—è–ª, —Å–ø–∞—Å–∏–±–æ!
Response: NOT_SPAM

Input: ???
Response: NOT_SPAM

Input: ...
Response: NOT_SPAM

Input: –î–∞
Response: NOT_SPAM

Input: –ò—â—É –ª—é–¥–µ–π, –≤–æ–∑—å–º—É 2-3 —á–µ–ª–æ–≤–µ–∫–∞ 18+ –£–¥–∞–ª–µ–Ω–Ω–∞—è –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å.–û—Ç 250$  –≤  –¥–µ–Ω—å.–ö–æ–º—É –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ: –ü–∏—à–∏—Ç–µ + –≤ –ª—Å
Response: SPAM

Input: –ù—É–∂–Ω—ã –ª—é–¥–∏, –∑–∞–Ω—è—Ç–æ—Å—Ç—å –Ω–∞ —É–¥–∞–ª—ë–Ω–∫–µ
–ù–∞–±–æ—Ä –≤ –∫–æ–º–∞–Ω–¥—É, —Å—Ç—Ä–æ–≥–æ 18+
–ù–µ —Å–∫–∞–º, –Ω–µ –Ω–∞—Ä–∫–æ, –Ω–∞–º –≤–∞–∂–Ω–∞ —Ä–µ–ø—É—Ç–∞—Ü–∏—è
–ü–∏—à–∏—Ç–µ "+" –≤ –ª–∏—á–Ω—ã–µ, –æ–±—Å—É–¥–∏–º –¥–µ—Ç–∞–ª–∏
Response: SPAM

Input: 3–¥pa–≤c—Ç–≤y–π—Çe,–í–µ–¥—É –ø–æ–∏—Å–∫ –øa—Ä—Ç–Ω—ë—Ä–æ–≤ –¥–ª—è —Åo—Ç—Ä—É–¥–Ωu—á–µ—Å—Ç–≤–∞ ,—Å–≤o–±o–¥–Ω—ã–π –≥pa—Ñ–∏–∫ ,–øpu—è—Ç–Ω—ã–π –∑apa–±o—Çok e–∂–µ–Ωe–¥–µ–ª—å–Ω–æ. Ec–ª–∏ –∏–Ω—Çepec—Ée—Ç –øo–¥po–±–Ωa—è –∏–Ω—Ñop–ºa—Ü–∏—è –ø–∏—àu—Ç–µ.
Response: SPAM

Input: üíöüíöüíöüíöüíöüíöüíöüíö
–ò—ây –Ωa o–±y—áe–Ω–∏e –ª—é–¥e–π c —Üe–ª—å—é –∑apa–±o—Ç–∫a. üíº
*‚É£Ha–øpa–≤–ªe–Ω–∏e: Crypto, –¢ec—Ç–Ωe—Ç—ã, A–∏p–¥po–ø—ã.
*‚É£–üo –≤pe–ºe–Ω–∏ –≤ cy—Ç–∫–∏ 1-2 —áaca, –ºo–∂–Ωo pa–±o—Ça—Ç—å co c–ºap—Ç—Ño–Ωa. ü§ù
*‚É£–îoxo–¥–Ωoc—Ç—å —á–∏c—Ça—è –≤ –¥e–Ω—å pa–≤–Ω—èe—Çc—è o—Ç 7-9 –øpo—Üe–Ω—Ço–≤.
*‚É£–ëEC–ü–õA–¢HOE O–ë–£–ßEH–òE, –ºo–π –∏–Ω—Çepec –øpo—Üe–Ω—Ç o—Ç –∑apa–±o—Ç–∫a. üí∂
Ec–ª–∏ –∑a–∏–Ω—Çepeco–≤a–ªo –ø–∏—à–∏—Çe –Ωa –ºo–π a–∫–∫ >>> @Alex51826.
Response: SPAM

Input: –ò—â—É –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤ –¥–ª—è –∑–∞—Ä–∞–±–æ—Ç–∫–∞ –ø–∞—Å—Å–∏–≤–Ω–æ–π –ø—Ä–∏–±—ã–ª–∏, –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –Ω–µ –∑–∞–Ω–∏–º–∞–µ—Ç + —Ö–æ—Ä–æ—à–∏–π –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –¥–æ–ø.–¥–æ—Ö–æ–¥. –ü–∏—à–∏—Ç–µ + –≤ –ª–∏—á–Ω—ã–µ
Response: SPAM

Input: –£–¥–∞–ª—ë–Ω–Ω–∞—è –∑–∞–Ω—è—Ç–æ—Å—Ç—å, —Å —Ö–æ—Ä–æ—à–µ–π –ø—Ä–∏–±—ã–ª—å—é 350 –¥–æ–ª–ª–∞—Ä–æ–≤ –≤ –¥–µ–Ω—å.1-2 —á–∞—Å–∞ –≤ –¥–µ–Ω—å. –°—Ç–∞–≤—å –ø–ª—é—Å –º–Ω–µ –≤ –ª–∏—á–Ω—ã–µ —Å–º—Å.
Response: SPAM

Input: –ü—Ä–∏–±—ã–ª—å–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ, –ø–æ–¥—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–π –æ—Å–Ω–æ–≤–µ(—É–¥–∞–ª–µ–Ω–Ω–æ) , –æ–ø—ã—Ç –Ω–µ –≤–∞–∂–µ–Ω.–ü–∏—à–∏—Ç–µ –≤ –ª–∏—á–Ω—ã–µ —Å–º—Å  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
Response: SPAM

Input: –ó–¥—Äa–≤—Å—Ç–≤—É–π—Ç–µ! –•–æ—á—É –≤–∞–º –ø—Äe–¥–ª–æ–∂–∏—Ç—å –≤a—Ä–∏–∞–Ω—Ç –øa—Å—Å–∏–≤–Ω–æ–≥–æ –∑–∞—Ä–∞–±–æ—Ç–∫–∞.–£–¥a–ª–µ–Ω–∫–∞.–û–±—É—á–µ–Ω–∏–µ –±e—Å–ø–ª–∞—Ç–Ω–æ–µ, –æ—Ç –≤–∞—Å —Ç—Äe–±—Ée—Ç—Å—è —Ç–æ–ª—å–∫–æ –øa—Äa —áa—Å–æ–≤ —Å–≤o–±o–¥–Ωo–≥o –≤—Ä–µ–ºe–Ω–∏ –∏ —Çe–ªe—Ñ–æ–Ω –∏–ª–∏ –∫–æ–º–ø—å—é—Ç–µ—Ä. –ï—Å–ª–∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ –Ω–∞–ø–∏—à–∏ –º–Ω–µ.
Response: SPAM

Input: –ò—â—É –ª—é–¥–µ–π, –≤–æ–∑—å–º—É 3 —á–µ–ª–æ–≤–µ–∫–∞ –æ—Ç 20 –ª–µ—Ç. –£–¥–∞–ª–µ–Ω–Ω–∞—è –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å. –û—Ç 250 –¥o–ª–ª–∞—Ä–æ–≤ –≤ –¥–µ–Ω—å. –ö–æ–º—É –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ –ø–∏—à–∏—Ç–µ –ø–ª—é—Å –≤ –ª–∏—á–∫—É
Response: SPAM

Input: –î–æ–±—Ä—ã–π –≤–µ—á–µ—Ä! –ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –≤–æ–ø—Ä–æ—Å) —è –±—ã —Ç–æ–∂–µ —Å —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ–º —É–∑–Ω–∞–ª–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
Response: NOT_SPAM

Input: –Ø–Ω—Ç–∞—Ä–∏–∫ ‚Äî –∫–æ—à–∫–∞-–º–∞—Ä—Ç—ã—à–∫–∞, —Å–≥—É—Å—Ç–æ–∫ —ç–Ω–µ—Ä–≥–∏–∏ —Å –æ—Ç–ª–∏—á–Ω—ã–º —É—Ä—á–∞—Ç–µ–ª–µ–º ‚ù§Ô∏è‚Äçüî•

üß° –ò—â–µ—Ç —á–µ–ª–æ–≤–µ–∫–∞, –∫–æ—Ç–æ—Ä–æ–º—É –º—É—Ä—á–∞—Ç—å
üß° –û–∫–æ–ª–æ 11 –º–µ—Å—è—Ü–µ–≤
üß° –°—Ç–µ—Ä–∏–ª–∏–∑–æ–≤–∞–Ω–∞. –û–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –æ—Ç –ø–∞—Ä–∞–∑–∏—Ç–æ–≤. –í–ø–µ—Ä–µ–¥–∏ –≤–∞–∫—Ü–∏–Ω–∞—Ü–∏—è, —á–∏–ø –∏ –ø–∞—Å–ø–æ—Ä—Ç
üß° C –Ω–µ–Ω–∞–≤—è–∑—á–∏–≤—ã–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ–º —Å—É–¥—å–±—ã üôè
üá¨üá™ –ì–æ—Ç–æ–≤–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å—Å—è –≤ –ª—é–±–æ–π —É–≥–æ–ª–æ–∫ –ì—Ä—É–∑–∏–∏, —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –∏ –¥–∞–ª—å—à–µ

–¢–µ–ª–µ–≥—Ä–∞–º nervnyi_komok
WhatsApp +999 599 099 567
Response: NOT_SPAM`,
				},
				{
					Role:    openai.ChatMessageRoleUser,
					Content: messageContent,
				},
			},
		},
	)

	if err != nil {
		entry.WithError(err).Error("failed to create chat completion")
		return errors.Wrap(err, "failed to create chat completion")
	}

	if len(llmResp.Choices) > 0 && llmResp.Choices[0].Message.Content == "SPAM" {
		success, err := banSpammer(chat.ID, user.ID, m.MessageID)
		if err != nil {
			entry.WithError(err).Error("failed to ban spammer")
			return errors.Wrap(err, "failed to ban spammer")
		}
		if !success {
			entry.Error("failed to ban spammer")
			return errors.New("failed to ban spammer")
		}
	}

	entry.Debug("message passed spam check, inserting member")
	if err := r.s.InsertMember(ctx, chat.ID, user.ID); err != nil {
		entry.WithError(err).Error("failed to insert member")
		return errors.Wrap(err, "failed to insert member")
	}

	entry.Info("message passed spam check, user added to members")
	return nil
}

func (r *Reactor) getLogEntry() *log.Entry {
	return log.WithField("object", "Reactor")
}

func (r *Reactor) getLanguage(chat *api.Chat, user *api.User) string {
	entry := r.getLogEntry().WithField("method", "getLanguage")
	entry.Debug("getting language for chat and user")
	if settings, err := r.s.GetDB().GetSettings(chat.ID); !tool.Try(err) {
		entry.WithField("language", settings.Language).Debug("using language from chat settings")
		return settings.Language
	}
	if user != nil && tool.In(user.LanguageCode, i18n.GetLanguagesList()...) {
		entry.WithField("language", user.LanguageCode).Debug("using user's language")
		entry.Debug("using user's language:", user.LanguageCode)
		return user.LanguageCode
	}
	entry.Debug("using default language:", config.Get().DefaultLanguage)
	return config.Get().DefaultLanguage
}
