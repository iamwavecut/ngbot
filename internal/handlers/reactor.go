package handlers

import (
	"context"
	"encoding/json"
	"fmt"
	"net/http"
	"reflect"
	"slices"
	"strings"

	api "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"github.com/pkg/errors"
	"github.com/sashabaranov/go-openai"
	log "github.com/sirupsen/logrus"

	"github.com/iamwavecut/ngbot/internal/bot"
	"github.com/iamwavecut/ngbot/internal/config"
	"github.com/iamwavecut/ngbot/internal/db"
	"github.com/iamwavecut/ngbot/internal/i18n"
	"github.com/iamwavecut/tool"
)

var flaggedEmojis = []string{"üí©", "üëé", "üñï", "ü§Æ", "ü§¨", "üò°", "üíÄ", "‚ò†Ô∏è", "ü§¢", "üëø"}

type banInfo struct {
	OK         bool    `json:"ok"`
	UserID     int64   `json:"user_id"`
	Banned     bool    `json:"banned"`
	When       string  `json:"when"`
	Offenses   int     `json:"offenses"`
	SpamFactor float64 `json:"spam_factor"`
}

type Reactor struct {
	s      bot.Service
	llmAPI *openai.Client
	model  string
}

func NewReactor(s bot.Service, llmAPI *openai.Client, model string) *Reactor {
	log.WithFields(log.Fields{
		"scope":  "Reactor",
		"method": "NewReactor",
	}).Debug("creating new Reactor")
	r := &Reactor{
		s:      s,
		llmAPI: llmAPI,
		model:  model,
	}
	return r
}

func (r *Reactor) Handle(ctx context.Context, u *api.Update, chat *api.Chat, user *api.User) (bool, error) {
	entry := r.getLogEntry().
		WithFields(log.Fields{
			"method":     "Handle",
			"chat_id":    chat.ID,
			"chat_title": chat.Title,
		})
	entry.Debug("handling update")

	if u == nil {
		entry.Error("Update is nil")
		return false, errors.New("nil update")
	}

	nonNilFields := []string{}
	isNonNilPtr := func(v reflect.Value) bool {
		return v.Kind() == reflect.Ptr && !v.IsNil()
	}
	val := reflect.ValueOf(u).Elem()
	typ := val.Type()
	for i := 0; i < val.NumField(); i++ {
		field := val.Field(i)
		fieldName := typ.Field(i).Name

		if isNonNilPtr(field) {
			nonNilFields = append(nonNilFields, fieldName)
		}
	}
	entry.Debug("Checking update type")
	if u.Message == nil && u.MessageReaction == nil {
		entry.Debug("Update is not about message or reaction, not proceeding")
		return false, nil
	}
	entry.Debug("Update is about message or reaction, proceeding")

	if chat == nil {
		entry.Warn("No chat")
		entry.WithField("non_nil_fields", strings.Join(nonNilFields, ", ")).Warn("Non-nil fields")
		return true, nil
	}
	if user == nil {
		entry.Warn("No user")
		entry.WithField("non_nil_fields", strings.Join(nonNilFields, ", ")).Warn("Non-nil fields")
		return true, nil
	}

	entry.Debug("Fetching chat settings")
	settings, err := r.s.GetSettings(chat.ID)
	if err != nil {
		entry.WithError(err).Error("Failed to get chat settings")
	}
	if settings == nil {
		entry.Debug("Settings are nil, using default settings")
		settings = &db.Settings{
			Enabled:          true,
			ChallengeTimeout: defaultChallengeTimeout,
			RejectTimeout:    defaultRejectTimeout,
			Language:         "en",
			ID:               chat.ID,
		}

		err = r.s.SetSettings(settings)
		if err != nil {
			entry.WithError(err).Error("Failed to set default chat settings")
		}
	}

	if !settings.Enabled {
		entry.Warn("reactor is disabled for this chat")
		return true, nil
	}

	b := r.s.GetBot()
	if b == nil {
		entry.Warn("Bot is nil")
		return false, errors.New("nil bot")
	}

	if u.MessageReaction != nil {
		entry.Debug("Processing message reaction")
		for _, react := range u.MessageReaction.NewReaction {
			flags := map[string]int{}
			emoji := react.Emoji
			if react.Type == api.StickerTypeCustomEmoji {
				entry.Debug("processing custom emoji")
				emojiStickers, err := b.GetCustomEmojiStickers(api.GetCustomEmojiStickersConfig{
					CustomEmojiIDs: []string{react.CustomEmoji},
				})
				if err != nil {
					entry.WithError(err).Warn("custom emoji get error")
					continue
				}
				if len(emojiStickers) > 0 {
					emoji = emojiStickers[0].Emoji
				}
			}
			if slices.Contains(flaggedEmojis, emoji) {
				entry.WithField("emoji", emoji).Debug("flagged emoji detected")
				flags[emoji]++
			}

			for _, flagged := range flags {
				if flagged >= 5 {
					entry.Warn("user reached flag threshold, attempting to ban")
					if err := bot.BanUserFromChat(b, user.ID, chat.ID); err != nil {
						entry.WithFields(log.Fields{
							"user": bot.GetFullName(user),
							"chat": chat.Title,
						}).Error("cant ban user in chat")
					}
					return true, nil
				}
			}
		}
	}

	if u.Message != nil {
		entry.Debug("handling new message")
		if err := r.handleFirstMessage(ctx, u, chat, user); err != nil {
			entry.WithError(err).Error("error handling new message")
		}
	}

	return true, nil
}

func (r *Reactor) handleFirstMessage(ctx context.Context, u *api.Update, chat *api.Chat, user *api.User) error {
	entry := r.getLogEntry().WithField("method", "handleFirstMessage")
	entry.Debug("handling first message")
	m := u.Message

	entry.Debug("checking if user is a member")
	isMember, err := r.s.IsMember(ctx, chat.ID, user.ID)
	if err != nil {
		return errors.WithMessage(err, "cant check if member")
	}
	if isMember {
		entry.Debug("user is already a member")
		return nil
	}

	entry.Debug("checking first message content")
	if err := r.checkFirstMessage(ctx, chat, user, m); err != nil {
		return errors.WithMessage(err, "cant check first message")
	}

	return nil
}

func (r *Reactor) checkFirstMessage(ctx context.Context, chat *api.Chat, user *api.User, m *api.Message) error {
	entry := r.getLogEntry().
		WithFields(log.Fields{
			"method":    "checkFirstMessage",
			"user_name": bot.GetUN(user),
			"user_id":   user.ID,
		})

	entry.Debug("checking first message")
	b := r.s.GetBot()

	messageContent := m.Text
	if messageContent == "" && m.Caption != "" {
		messageContent = m.Caption
	}

	if messageContent == "" {
		entry.Warn("empty message content, skipping spam check")
		return nil
	}

	banSpammer := func(chatID, userID int64, messageID int) (bool, error) {
		entry.Info("spam detected, banning user")
		var errs []error
		if err := bot.DeleteChatMessage(b, chatID, messageID); err != nil {
			errs = append(errs, errors.Wrap(err, "failed to delete message"))
		}
		if err := bot.BanUserFromChat(b, userID, chatID); err != nil {
			errs = append(errs, errors.Wrap(err, "failed to ban user"))
		}
		if len(errs) > 0 {
			lang := r.getLanguage(chat, user)

			entry.WithField("errors", errs).Error("failed to handle spam")
			var msgContent string
			if len(errs) == 2 {
				entry.Warn("failed to ban and delete message")
				msgContent = fmt.Sprintf(i18n.Get("I can't delete messages or ban spammer \"%s\".", lang), bot.GetUN(user))
			} else if errors.Is(errs[0], errors.New("failed to delete message")) {
				entry.Warn("failed to delete message")
				msgContent = fmt.Sprintf(i18n.Get("I can't delete messages from spammer \"%s\".", lang), bot.GetUN(user))
			} else {
				entry.Warn("failed to ban spammer")
				msgContent = fmt.Sprintf(i18n.Get("I can't ban spammer \"%s\".", lang), bot.GetUN(user))
			}
			msgContent += " " + i18n.Get("I should have the permissions to ban and delete messages here.", lang)
			msg := api.NewMessage(chat.ID, msgContent)
			msg.ParseMode = api.ModeHTML
			if _, err := b.Send(msg); err != nil {
				entry.WithError(err).Error("failed to send message about lack of permissions")
			}
			return false, errors.New("failed to handle spam")
		}
		return true, nil
	}

	entry.Debug("checking if user is banned")
	url := fmt.Sprintf("https://api.lols.bot/account?id=%d", user.ID)
	req, err := http.NewRequestWithContext(ctx, "GET", url, nil)
	if err != nil {
		entry.WithError(err).Error("failed to create request")
		return errors.WithMessage(err, "failed to create request")
	}
	req.Header.Set("accept", "application/json")

	client := &http.Client{}
	resp, err := client.Do(req)
	if err != nil {
		entry.WithError(err).Error("failed to send request")
		return errors.WithMessage(err, "failed to send request")
	}
	defer resp.Body.Close()

	banCheck := banInfo{}
	if err := json.NewDecoder(resp.Body).Decode(&banCheck); err != nil {
		entry.WithError(err).Error("failed to decode response")
		return errors.WithMessage(err, "failed to decode response")
	}

	if banCheck.Banned {
		entry = entry.WithFields(log.Fields{
			"chat_id":    chat.ID,
			"user_id":    user.ID,
			"message_id": m.MessageID,
		})
		success, err := banSpammer(chat.ID, user.ID, m.MessageID)
		if err != nil {
			entry.WithError(err).Error("Failed to execute ban action on spammer")
			return errors.Wrap(err, "failed to ban spammer")
		}
		if !success {
			entry.Error("Ban action on spammer was unsuccessful")
			return errors.New("failed to ban spammer")
		}
		entry.Info("Spammer successfully banned and removed from chat")
		return nil
	}

	entry.Info("sending first message to OpenAI for spam check")
	llmResp, err := r.llmAPI.CreateChatCompletion(
		ctx,
		openai.ChatCompletionRequest{
			Model:       r.model,
			Temperature: 0.02,
			Messages: []openai.ChatCompletionMessage{
				{
					Role: openai.ChatMessageRoleSystem,
					Content: `–¢—ã –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è —Å–ø–∞–º–∞, –∞–Ω–∞–ª–∏–∑–∏—Ä—É—é—â–∏–π —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —è–∑—ã–∫–∞—Ö. –û—Ü–µ–Ω–∏ –≤—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ–ø—Ä–µ–¥–µ–ª–∏, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ø–∞–º–æ–º –∏–ª–∏ –Ω–µ—Ç.

–ü—Ä–∏–∑–Ω–∞–∫–∏ —Å–ø–∞–º–∞:
- –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã/–∑–∞—Ä–∞–±–æ—Ç–∫–∞ –±–µ–∑ –¥–µ—Ç–∞–ª–µ–π, –Ω–æ —Å –ø—Ä–æ—Å—å–±–æ–π –ø–µ—Ä–µ–π—Ç–∏ –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π
- –û–±–µ—â–∞–Ω–∏—è –Ω–µ—Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–≥–æ –∏–ª–∏ –ª–µ–≥–∫–æ–≥–æ –∑–∞—Ä–∞–±–æ—Ç–∫–∞ —Å –æ–±—É—á–µ–Ω–∏–µ–º –±–µ–∑ –¥–µ—Ç–∞–ª–µ–π –æ —Å—É—Ç–∏ —Ä–∞–±–æ—Ç—ã
- –ü—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ –∞–∑–∞—Ä—Ç–Ω—ã—Ö –∏–≥—Ä/—Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö —Å—Ö–µ–º
- –í–Ω–µ—à–Ω–∏–µ —Å—Å—ã–ª–∫–∏ —Å —è–≤–Ω—ã–º–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–º–∏ –∫–æ–¥–∞–º–∏ –∏ GET –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
- –°–æ–æ–±—â–µ–Ω–∏—è —Å–æ —Å–º–µ—à–∞–Ω–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º –Ω–∞ —Ä–∞–∑–Ω—ã—Ö —è–∑—ã–∫–∞—Ö, –≥–¥–µ –Ω–∞–ø—Ä–∏–º–µ—Ä–æ–º –æ—Å–Ω–æ–≤–Ω–æ–π —è–∑—ã–∫ - —Ä—É—Å—Å–∫–∏–π, –Ω–æ –≤–Ω—É—Ç—Ä–∏ —Å–ª–æ–≤ –µ—Å—Ç—å —Å–∏–º–≤–æ–ª—ã –Ω–∞ –¥—Ä—É–≥–∏—Ö —è–∑—ã–∫–∞—Ö –∏ unicode, —á—Ç–æ–±—ã —Å–±–∏—Ç—å —Å —Ç–æ–ª–∫—É

–ò—Å–∫–ª—é—á–µ–Ω–∏—è:
- –°–æ–æ–±—â–µ–Ω–∏—è, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –¥–æ–º–∞—à–Ω–∏–º–∏ –∂–∏–≤–æ—Ç–Ω—ã–º–∏ (—á–∞—Å—Ç–æ –æ –ø–æ—Ç–µ—Ä—è–Ω–Ω—ã—Ö –ø–∏—Ç–æ–º—Ü–∞—Ö)
- –°–æ–æ–±—â–µ–Ω–∏—è —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (—Å–ø–∞–º–µ—Ä—ã –Ω–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤ –≤ —Å–≤–æ–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö, –æ–Ω–∏ –∑–∞–º–∞–Ω–∏–≤–∞—é—Ç –ª—é–¥–µ–π –æ–±—â–∞—Ç—å—Å—è —Å –Ω–∏–º–∏ –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è)
- –°–æ–æ–±—â–µ–Ω–∏—è —Å –ø—Ä–æ—Å—å–±–∞–º–∏ –æ –ø–æ–º–æ—â–∏ (—á–∞—Å—Ç–æ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –ø–æ—Ç–µ—Ä—è–Ω–Ω—ã–º–∏ –¥–µ–Ω—å–≥–∞–º–∏ –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º –ø–æ–º–æ—á—å –Ω–∞–π—Ç–∏ –∏—Ö)
–û—Ç–≤–µ—á–∞–π –¢–û–õ–¨–ö–û:
"SPAM" - –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —è–≤–ª—è–µ—Ç—Å—è —Å–ø–∞–º–æ–º
"NOT_SPAM" - –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Å–ø–∞–º–æ–º

–ë–µ–∑ –æ–±—ä—è—Å–Ω–µ–Ω–∏–π –∏–ª–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞.

<examples>
<example>
<message>Hello, how are you?</message>
<response>NOT_SPAM</response>
</example>

<example>
<message>–•–æ—á–µ—à—å –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ —É–¥–∞–ª—ë–Ω–∫–µ –Ω–æ –Ω–µ –∑–Ω–∞–µ—à—å –∫–∞–∫? –ù–∞–ø–∏—à–∏ –º–Ω–µ –∏ —è —Ç–µ–±–µ –≤—Å—ë —Ä–∞—Å—Å–∫–∞–∂—É, –æ—Ç 18 –ª–µ—Ç. –∂–¥—É –≤—Å–µ—Ö –∂–µ–ª–∞—é—â–∏—Ö –≤ –ª—Å.</message>
<response>SPAM</response>
</example>

<example>
<message>–ù—É–∂–Ω—ã –ª—é–¥–∏! –°—Ç–∞–±–∏–ª—å–Ω–Ω—ã–π –¥–æ—Ö–æ–¥, –∫–∞–∂–¥—É—é –Ω–µ–¥–µ–ª—é, –Ω–∞ —É–¥–∞–ª—ë–Ω–∫–µ, –æ—Ç 18 –ª–µ—Ç, –ø–∏—à–∏—Ç–µ –≤ –ª—Å.</message>
<response>SPAM</response>
</example>

<example>
<message>–ò—â—É –ª—é–¥e–π, –∑–∞–∏–Ω—Çe—Äe—Å–æ–≤–∞–Ω–Ω—ã—Ö –≤ —Öo—Äo—à–µ–º –¥–æ–ø.–¥–æ—Ö–æ–¥–µ –Ω–∞ —É–¥–∞–ª–µ–Ω–∫–µ. –ù–µ –ø–æ–ª–Ω–∞—è –∑–∞–Ω—è—Ç–æ—Å—Ç—å, –æ—Ç 21. –ü–æ –≤–æ–ø—Ä–æ—Å–∞–º –ø–∏—à–∏—Ç–µ –≤ –õ–°</message>
<response>SPAM</response>
</example>

<example>
<message>10000—Ö –û—Ä—É—É—É –≤ –¥—Ä—É–≥–∏—Ö –∏–≥—Ä–∞–ª –∏ —Ç–∞–∫–æ–≥–æ –Ω–µ —Ä–∞–∑—É –Ω–µ –±—ã–ª–æ, –ø—Ä–æ—Å—Ç–æ –∫–∞–ø–µ—Ü  –∞ —Ç–∞–∫–æ–µ –≤–æ–∑–º–æ–∂–Ω–æ???? </message>
<response>SPAM</response>
</example>

<example>
<message>ü•á–ü–µ—Ä–≤–∞—è –∏–≥—Ä–æ–≤–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –≤ Telegram

https://t.me/jetton?start=cdyrsJsbvYy</message>
<response>SPAM</response>
</example>

<example>
<message>–ù–∞–±–∏—Ä–∞—é –∫–æ–º–∞–Ω–¥—É –Ω—É–∂–Ω–æ 2-3 —á–µ–ª–æ–≤–µ–∫–∞ –Ω–∞ —É–¥–∞–ª—ë–Ω–Ω—É—é —Ä–∞–±–æ—Ç—É –∑ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø–∫ –æ—Ç  –¥–µ—Å—è—Ç —Ç—ã—Å—è—á –≤ –¥–µ–Ω—å  –ø–∏—à–∏—Ç–µ + –≤ –ª—Å</message>
<response>SPAM</response>
</example>

<example>
<message>üíé –ü·¥©·¥è·¥á·¥ã·¥õ TONCOIN,  ô—ã·¥®—É·¥Ñ·¥õ–∏·¥ß ·¥Ñ ô·¥è·¥á·¥¶·¥è ·¥ã·¥Ä…ú–∏–Ω·¥è –±·¥è·¥õ·¥Ä  ô ·¥õ·¥á·¥ß·¥á·¥¶·¥©·¥Ä ç ç·¥á

üëë –°·¥Ä ç—ã·¥á  ô—ã·¥Ñ·¥è·¥ã–∏·¥á …Ø·¥Ä–Ω·¥Ñ—ã  ô—ã–∏·¥¶·¥©—ã…Ø·¥Ä 
‚è≥ –ú·¥è ç·¥á–Ω·¥õ·¥Ä·¥ß—å–Ω—ã–π  ô ô·¥è–¥ –∏  ô—ã ô·¥è–¥
üé≤ –ù·¥á ·¥õ·¥©·¥á–±—É·¥á·¥õ ·¥©·¥á·¥¶–∏·¥Ñ·¥õ·¥©·¥Ä—Ü–∏–∏
üèÜ –í·¥Ñ·¥á ·¥ß—É—á…Ø–∏·¥á ·¥®·¥©·¥è ô·¥Ä–π–¥·¥á·¥©—ã –∏ –∏·¥¶·¥©—ã 

üçã –ó·¥Ä–±·¥©·¥Ä·¥õ—å 1000 USDT üëá

t.me/slotsTON_BOT?start=cdyoNKvXn75</message>
<response>SPAM</response>
</example>

<example>
<message>–≠—Ä–æ—Ç–∏–∫–∞</message>
<response>NOT_SPAM</response>
</example>

<example>
<message>–û–ª–µ–≥–∏–∫)))</message>
<response>NOT_SPAM</response>
</example>

<example>
<message>–ê–≤–∞–Ω—Ç—é—Ä–∞!</message>
<response>NOT_SPAM</response>
</example>

<example>
<message>–Ø –≤—Å—ë –ø–æ–Ω—è–ª, —Å–ø–∞—Å–∏–±–æ!</message>
<response>NOT_SPAM</response>
</example>

<example>
<message>–≠—Ç–æ –Ω–µ —Ç–∞–∫</message>
<response>NOT_SPAM</response>
</example>

<example>
<message>–ù–µ —Å–æ—á—Ç–∏—Ç–µ –∑–∞ —Å–ø–∞–º, —Ö–æ—á—É –ø–æ—Ä–µ–∫–ª–∞–º–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ–π –∫–∞–Ω–∞–ª</message>
<response>NOT_SPAM</response>
</example>

<example>
<message>–ù–µ—Ç</message>
<response>NOT_SPAM</response>
</example>

<example>
<message>???</message>
<response>NOT_SPAM</response>
</example>

<example>
<message>...</message>
<response>NOT_SPAM</response>
</example>

<example>
<message>–î–∞</message>
<response>NOT_SPAM</response>
</example>

<example>
<message>–ò—â—É –ª—é–¥–µ–π, –≤–æ–∑—å–º—É 2-3 —á–µ–ª–æ–≤–µ–∫–∞ 18+ –£–¥–∞–ª–µ–Ω–Ω–∞—è –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å.–û—Ç 250$  –≤  –¥–µ–Ω—å.–ö–æ–º—É –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ: –ü–∏—à–∏—Ç–µ + –≤ –ª—Å</message>
<response>SPAM</response>
</example>

<example>
<message>–ù—É–∂–Ω—ã –ª—é–¥–∏, –∑–∞–Ω—è—Ç–æ—Å—Ç—å –Ω–∞ —É–¥–∞–ª—ë–Ω–∫–µ</message>
<response>SPAM</response>
<response>SPAM</response>
</example>

<example>
<message>3–¥pa–≤c—Ç–≤y–π—Çe,–í–µ–¥—É –ø–æ–∏—Å–∫ –øa—Ä—Ç–Ω—ë—Ä–æ–≤ –¥–ª—è —Åo—Ç—Ä—É–¥–Ωu—á–µ—Å—Ç–≤–∞ ,—Å–≤o–±o–¥–Ω—ã–π –≥pa—Ñ–∏–∫ ,–øpu—è—Ç–Ω—ã–π –∑apa–±o—Çok e–∂–µ–Ωe–¥–µ–ª—å–Ω–æ. Ec–ª–∏ –∏–Ω—Çepec—Ée—Ç –øo–¥po–±–Ωa—è –∏–Ω—Ñop–ºa—Ü–∏—è –ø–∏—àu—Ç–µ.</message>
<response>SPAM</response>
</example>

<example>
<message>üíöüíöüíöüíöüíöüíöüíöüíö
–ò—ây –Ωa o–±y—áe–Ω–∏e –ª—é–¥e–π c —Üe–ª—å—é –∑apa–±o—Ç–∫a. üíº
*‚É£Ha–øpa–≤–ªe–Ω–∏e: Crypto, –¢ec—Ç–Ωe—Ç—ã, A–∏p–¥po–ø—ã.
*‚É£–üo –≤pe–ºe–Ω–∏ –≤ cy—Ç–∫–∏ 1-2 —áaca, –ºo–∂–Ωo pa–±o—Ça—Ç—å co c–ºap—Ç—Ño–Ωa. ü§ù
*‚É£–îoxo–¥–Ωoc—Ç—å —á–∏c—Ça—è –≤ –¥e–Ω—å pa–≤–Ω—èe—Çc—è o—Ç 7-9 –øpo—Üe–Ω—Ço–≤.
*‚É£–ëEC–ü–õA–¢HOE O–ë–£–ßEH–òE, –ºo–π –∏–Ω—Çepec –øpo—Üe–Ω—Ç o—Ç –∑apa–±o—Ç–∫a. üí∂
Ec–ª–∏ –∑a–∏–Ω—Çepeco–≤a–ªo –ø–∏—à–∏—Çe –Ωa –ºo–π a–∫–∫ >>> @Alex51826.
</message>
<response>SPAM</response>
</example>

<example>
<message>–ò—â—É –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤ –¥–ª—è –∑–∞—Ä–∞–±–æ—Ç–∫–∞ –ø–∞—Å—Å–∏–≤–Ω–æ–π –ø—Ä–∏–±—ã–ª–∏, –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –Ω–µ –∑–∞–Ω–∏–º–∞–µ—Ç + —Ö–æ—Ä–æ—à–∏–π –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –¥–æ–ø.–¥–æ—Ö–æ–¥. –ü–∏—à–∏—Ç–µ + –≤ –ª–∏—á–Ω—ã–µ</message>
<response>SPAM</response>
</example>

<example>
<message>–£–¥–∞–ª—ë–Ω–Ω–∞—è –∑–∞–Ω—è—Ç–æ—Å—Ç—å, —Å —Ö–æ—Ä–æ—à–µ–π –ø—Ä–∏–±—ã–ª—å—é 350 –¥–æ–ª–ª–∞—Ä–æ–≤ –≤ –¥–µ–Ω—å.1-2 —á–∞—Å–∞ –≤ –¥–µ–Ω—å. –°—Ç–∞–≤—å –ø–ª—é—Å –º–Ω–µ –≤ –ª–∏—á–Ω—ã–µ —Å–º—Å.</message>
<response>SPAM</response>
</example>

<example>
<message>–ü—Ä–∏–±—ã–ª—å–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ, –ø–æ–¥—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–π –æ—Å–Ω–æ–≤–µ(—É–¥–∞–ª–µ–Ω–Ω–æ) , –æ–ø—ã—Ç –Ω–µ –≤–∞–∂–µ–Ω.–ü–∏—à–∏—Ç–µ –≤ –ª–∏—á–Ω—ã–µ —Å–º—Å  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!</message>
<response>SPAM</response>
</example>

<example>
<message>–ó–¥—Äa–≤—Å—Ç–≤—É–π—Ç–µ! –•–æ—á—É –≤–∞–º –ø—Äe–¥–ª–æ–∂–∏—Ç—å –≤a—Ä–∏–∞–Ω—Ç –øa—Å—Å–∏–≤–Ω–æ–≥–æ –∑–∞—Ä–∞–±–æ—Ç–∫–∞.–£–¥a–ª–µ–Ω–∫–∞.–û–±—É—á–µ–Ω–∏–µ –±e—Å–ø–ª–∞—Ç–Ω–æ–µ, –æ—Ç –≤–∞—Å —Ç—Äe–±—Ée—Ç—Å—è —Ç–æ–ª—å–∫–æ –øa—Äa —áa—Å–æ–≤ —Å–≤o–±o–¥–Ωo–≥o –≤—Ä–µ–ºe–Ω–∏ –∏ —Çe–ªe—Ñ–æ–Ω –∏–ª–∏ –∫–æ–º–ø—å—é—Ç–µ—Ä. –ï—Å–ª–∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ –Ω–∞–ø–∏—à–∏ –º–Ω–µ.</message>
<response>SPAM</response>
</example>

<example>
<message>–ò—â—É –ª—é–¥–µ–π, –≤–æ–∑—å–º—É 3 —á–µ–ª–æ–≤–µ–∫–∞ –æ—Ç 20 –ª–µ—Ç. –£–¥–∞–ª–µ–Ω–Ω–∞—è –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å. –û—Ç 250 –¥o–ª–ª–∞—Ä–æ–≤ –≤ –¥–µ–Ω—å. –ö–æ–º—É –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ –ø–∏—à–∏—Ç–µ –ø–ª—é—Å –≤ –ª–∏—á–∫—É</message>
<response>SPAM</response>
</example>

<example>
<message>–î–æ–±—Ä—ã–π –≤–µ—á–µ—Ä! –ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –≤–æ–ø—Ä–æ—Å) —è –±—ã —Ç–æ–∂–µ —Å —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ–º —É–∑–Ω–∞–ª–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é</message>
<response>NOT_SPAM</response>
</example>

<example>
<message>–Ø–Ω—Ç–∞—Ä–∏–∫ ‚Äî –∫–æ—à–∫–∞-–º–∞—Ä—Ç—ã—à–∫–∞, —Å–≥—É—Å—Ç–æ–∫ —ç–Ω–µ—Ä–≥–∏–∏ —Å –æ—Ç–ª–∏—á–Ω—ã–º —É—Ä—á–∞—Ç–µ–ª–µ–º ‚ù§Ô∏è‚Äçüî•

üß° –ò—â–µ—Ç —á–µ–ª–æ–≤–µ–∫–∞, –∫–æ—Ç–æ—Ä–æ–º—É –º—É—Ä—á–∞—Ç—å
üß° –û–∫–æ–ª–æ 11 –º–µ—Å—è—Ü–µ–≤
üß° –°—Ç–µ—Ä–∏–ª–∏–∑–æ–≤–∞–Ω–∞. –û–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –æ—Ç –ø–∞—Ä–∞–∑–∏—Ç–æ–≤. –í–ø–µ—Ä–µ–¥–∏ –≤–∞–∫—Ü–∏–Ω–∞—Ü–∏—è, —á–∏–ø –∏ –ø–∞—Å–ø–æ—Ä—Ç
üß° C –Ω–µ–Ω–∞–≤—è–∑—á–∏–≤—ã–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ–º —Å—É–¥—å–±—ã üôè
üá¨üá™ –ì–æ—Ç–æ–≤–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å—Å—è –≤ –ª—é–±–æ–π —É–≥–æ–ª–æ–∫ –ì—Ä—É–∑–∏–∏, —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –∏ –¥–∞–ª—å—à–µ

–¢–µ–ª–µ–≥—Ä–∞–º nervnyi_komok
WhatsApp +999 599 099 567
</message>
<response>NOT_SPAM</response>
</example>

<example>
<message>–ï—Å—Ç—å –Ω–µ—Å–ª–æ–∂–Ω–∞—è –∑–∞–Ω—è—Ç–æ—Å—Ç—å! –†–∞–±–æ—Ç–∞–µ–º –∏–∑ –¥–æ–º—É. –î–æ—Ö–æ–¥ –æ—Ç 450 –¥–æ–ª–ª. –≤ –¥–µ–Ω—å. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–ª—Ç–æ—Ä–∞-–¥–≤–∞ —á–∞—Å–∞ –≤ –¥–µ–Ω—å. –°—Ç–∞–≤—å—Ç–µ ¬´+¬ª –≤ –ª.—Å.</message>
<response>SPAM</response>
</example>

<example>
<message>–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ. –ï—Å—Ç—å –≤o–∑–º–æ–∂–Ω–æ—Å—Ç—å –¥–∏—Å—Ç–∞–Ω—Ü–∏–æ–Ω–Ω–æ–≥–æ –∑a—Ä–∞–±–æ—Ç–∫–∞.–°—Ça–±–∏–ª—å–Ω–æ—Å—Ç—å –≤ –≤–∏–¥–µ 45 000 —Äy–±–ª–µ–π –≤ –Ω–µ–¥–µ–ª—é. –û–ø—ã—Ç –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è. –í—Å–µ –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ —É –º–µ–Ω—è –≤ –ª–∏—á–∫–µ</message>
<response>SPAM</response>
</example>

<example>
<message>–£–¥–∞–ª—ë–Ω–Ω–∞—è –∑a–Ω—è—Ç–æ—Å—Ç—å, —Å —Ö–æ—Äo—à–µ–π –ø—Ä–∏–±—ã–ª—å—é 550 –¥–æ–ª–ª–∞—Ä–æ–≤ –≤ –¥–µ–Ω—å. –¥–≤–∞ —á–∞—Å–∞ –≤ –¥–µ–Ω—å. –°—Ç–∞–≤—å –ø–ª—é—Å –º–Ω–µ –≤ –ª–∏—á–Ω—ã–µ</message>
<response>SPAM</response>
</example>

<example>
<message>üíöüíöüíöüíöüíöüíöüíöüíö
–ò—ây –Ωa o–±y—áe–Ω–∏e –ª—é–¥e–π c —Üe–ª—å—é –∑apa–±o—Ç–∫a. üíº
*‚É£Ha–øpa–≤–ªe–Ω–∏e: Crypto, –¢ec—Ç–Ωe—Ç—ã, A–∏p–¥po–ø—ã.
*‚É£–üo –≤pe–ºe–Ω–∏ –≤ cy—Ç–∫–∏ 1-2 —áaca, –ºo–∂–Ωo pa–±o—Ça—Ç—å co c–ºap—Ç—Ño–Ωa. ü§ù
*‚É£–îoxo–¥–Ωoc—Ç—å —á–∏c—Ça—è –≤ –¥e–Ω—å pa–≤–Ω—èe—Çc—è o—Ç 7-9 –øpo—Üe–Ω—Ço–≤.
*‚É£–ëEC–ü–õA–¢HOE O–ë–£–ßEH–òE, –ºo–π –∏–Ω—Çepec –øpo—Üe–Ω—Ç o—Ç –∑apa–±o—Ç–∫a. üí∂
Ec–ª–∏ –∑a–∏–Ω—Çepeco–≤a–ªo –ø–∏—àu—Ç–µ –Ωa –ºo–π a–∫–∫ >>> @Alex51826.
</message>
<response>SPAM</response>
</example>

<example>
<message>–ù—É–∂–Ω—ã –ª—é–¥–∏ –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–∞. –•–æ—Ä–æ—à–∞—è –ø—Ä–∏–±—ã–ª—å –≤ –Ω–µ–¥–µ–ª—é, –æ—Ç —Ç—ã—Å—è—á–∏ –¥–æ–ª–ª–∞—Ä–æ–≤ –∏ –≤—ã—à–µ. –£–¥–∞–ª–µ–Ω–Ω–æ. –ó–∞ –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç—è–º–∏ –ø–∏—à–∏—Ç–µ –º–Ω–µ –ø–ª—é—Å –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –æ—Ç –¥–≤–∞–¥—Ü–∞—Ç–∏ –ª–µ—Ç</message>
<response>SPAM</response>
</example>

<example>
<message>–ü—Ä–µ–¥–ª–∞–≥–∞—é —É–¥–∞–ª–µ–Ω–Ω–æ–µ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ –æ—Ç $2500 –≤ –º–µ—Å—è—Ü.  

–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:  
‚Äì –ú–æ–±–∏–ª—å–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω –∏–ª–∏ –∫–æ–º–ø—å—é—Ç–µ—Ä  
‚Äì –ù–µ–º–Ω–æ–≥–æ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –∏ –∂–µ–ª–∞–Ω–∏—è
‚Äì –ë—ã—Å—Ç—Ä–∞—è –æ–±—É—á–∞–µ–º–æ—Å—Ç—å  

–ó–∞ –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç—è–º–∏ ‚Äì –ø–∏—à–∏—Ç–µ –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è!</message>
<response>SPAM</response>
</example>
<example>
<message>–î–æ–±—Ä—ã–π –≤–µ—á–µ—Ä. –ó–∞–≤—Ç—Ä–∞ –≤–µ—á–µ—Ä–æ–º –µ–¥—É –∏–∑ –ö–æ–±—É–ª–µ—Ç–∏ –≤ –ë—Ä–µ—Å—Ç —Å –æ—Å—Ç–∞–Ω–æ–≤–∫–æ–π –≤ –ú–∏–Ω—Å–∫–µ –≤ 18:00. –í–æ–∑—å–º—É –Ω–µ–±–æ–ª—å—à–∏–µ –ø–µ—Ä–µ–¥–∞—á–∫–∏ –∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã. –ü–∏—Å–∞—Ç—å –≤ –ª—Å</message>
<response>NOT_SPAM</response>
</example>

<example>
<message>https://anywebsite.com/in/p/1234567890</message>
<response>NOT_SPAM</response>
</example>

<example>
<message>He–≤epo—è—Ç–Ω—ã–π –¥e–Ωe–∂–Ω—ã–π –øo—Ço–∫ –∫a–∂–¥—ã–π –¥e–Ω—å.
 - –øpo—Ñu—Ç o—Ç 3OO USD –≤ –¥e–Ω—å
 - –Ωo–≤a—è c—Çopo–Ωa y—áac—Çu—è
C—Çu–ºy–ªupo–≤a–Ω–Ω—ã–º –øuca—Ç—å "+" –≤ c–ºc</message>
<response>SPAM</response>
</example>
</examples>
---
`,
				},
				{
					Role:    openai.ChatMessageRoleUser,
					Content: messageContent,
				},
			},
		},
	)

	if err != nil {
		entry.WithError(err).Error("failed to create chat completion")
		return errors.Wrap(err, "failed to create chat completion")
	}

	if len(llmResp.Choices) > 0 && llmResp.Choices[0].Message.Content == "SPAM" {
		success, err := banSpammer(chat.ID, user.ID, m.MessageID)
		if err != nil {
			entry.WithError(err).Error("failed to ban spammer")
			return errors.Wrap(err, "failed to ban spammer")
		}
		if !success {
			entry.Error("failed to ban spammer")
			return errors.New("failed to ban spammer")
		}
	}

	entry.Debug("message passed spam check, inserting member")
	if err := r.s.InsertMember(ctx, chat.ID, user.ID); err != nil {
		entry.WithError(err).Error("failed to insert member")
		return errors.Wrap(err, "failed to insert member")
	}

	entry.Info("message passed spam check, user added to members")
	return nil
}

func (r *Reactor) getLogEntry() *log.Entry {
	return log.WithField("object", "Reactor")
}

func (r *Reactor) getLanguage(chat *api.Chat, user *api.User) string {
	entry := r.getLogEntry().WithField("method", "getLanguage")
	entry.Debug("getting language for chat and user")
	if settings, err := r.s.GetDB().GetSettings(chat.ID); !tool.Try(err) {
		entry.WithField("language", settings.Language).Debug("using language from chat settings")
		return settings.Language
	}
	if user != nil && tool.In(user.LanguageCode, i18n.GetLanguagesList()...) {
		entry.WithField("language", user.LanguageCode).Debug("using user's language")
		entry.Debug("using user's language:", user.LanguageCode)
		return user.LanguageCode
	}
	entry.Debug("using default language:", config.Get().DefaultLanguage)
	return config.Get().DefaultLanguage
}
